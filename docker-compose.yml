x-nginx: &nginx
  container_name: chatapp-nginx
  image: nginx:1.19-alpine
  volumes:
    - ./nginx/${NODE_ENV}/templates:/etc/nginx/templates:ro
    - ./certbot/conf:/etc/letsencrypt:ro
    - ./certbot/www:/var/www/certbot

x-certbot: &certbot
  container_name: chatapp-certbot
  image: certbot/certbot
  # Add --force-renew flag when in production
  command: >-
    certonly --non-interactive --agree-tos --no-eff-email
    --webroot -w /var/www/certbot
    --email ${CERTBOT_EMAIL}
    -d ${DOMAIN}
  volumes:
    - ./certbot/conf:/etc/letsencrypt
    - ./certbot/www:/var/www/certbot
  env_file:
    - path: .env.development.local
      required: true
    - path: .env
      required: false

services:
  mongo1:
    image: mongo:7.0
    container_name: chatapp-mongo-1
    volumes:
      - mongodb-data-1:/data/db
    hostname: chatapp-mongo-1
    expose:
      - 27017
    ports:
      - 27017:27017
    environment:
      PUID: 1000
      PGID: 1000
      MONGO_INITDB_DATABASE: ${MONGODB_DATABASE}
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    restart: always
    profiles:
      - production
      - development
      - backend
    env_file:
      - path: .env.development
        required: true
      - path: .env
        required: false
    command: mongod --replSet rs0 --port 27017 --dbpath /data/db --bind_ip_all --wiredTigerCacheSizeGB 1
    networks:
      default:
    healthcheck:
      test: echo "try { rs.status() } catch (err) { rs.initiate({_id:'rs0',members:[{_id:0,host:'chatapp-mongo-1:27017'}]}) }" | mongosh --port 27017 --quiet
      interval: 5s
      timeout: 30s
      start_period: 5s
      start_interval: 1s
      retries: 30

  web:
    container_name: chatapp-web
    build:
      context: .
      dockerfile: ./apps/web/Dockerfile
    restart: always
    expose:
      - ${NEXT_APP_PORT}
    networks:
      - default
    profiles:
      - development
      - production
    env_file:
      - path: .env.development
        required: true
      - path: .env
        required: false
  api:
    container_name: chatapp-api
    build:
      context: .
      dockerfile: ./apps/api/Dockerfile
    restart: always
    expose:
      - ${API_PORT}
    networks:
      - default
    profiles:
      - development
      - production
    env_file:
      - path: .env.development
        required: true
      - path: .env
        required: false
  nginx:
    <<: *nginx
    restart: always
    ports:
      - ${NGINX_PORT}:${NGINX_PORT}
      # Comment this line when on development mode
      - 443:443
    profiles:
      - development
      - production
  certbot:
    <<: *certbot
    depends_on:
      - nginx-init
    profiles:
      - production
      - certification
  nginx-init:
    <<: *nginx
    container_name: chatapp-nginx-init # Unique container name for nginx-init service
    volumes:
      - ./nginx/production/default_init.conf:/etc/nginx/nginx.conf:ro
    profiles:
      - production
      - certification

# Define a network, which allows containers to communicate
# with each other, by using their container name as a hostname
networks:
  default:
    driver: bridge

volumes:
  mongodb-data-1:
