// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider                  = "prisma-erd-generator"
  output                    = "ERD.svg"
  theme                     = "neutral"
  includeRelationFromFields = true
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String            @id @default(auto()) @map("_id") @db.ObjectId
  email     String            @unique
  password  String
  status    String?           @default("I am on ChatApp")
  name      String?
  nickname  String?
  groups    GroupEnrollment[] @relation("belongs")
  chats     ChatEnrollment[]
  createdAt DateTime          @default(now())
}

model Chat {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  creatorId String
  createdAt DateTime         @default(now())
  members   ChatEnrollment[]
}

model ChatEnrollment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  chatId    String   @db.ObjectId
  chat      Chat     @relation(fields: [chatId], references: [id])
}

model Group {
  id           String            @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  createdAt    DateTime          @default(now())
  creatorId    String
  groupDetails String?
  members      GroupEnrollment[] @relation("contains")
}

model GroupEnrollment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  role      UserRole
  userId    String   @db.ObjectId
  user      User     @relation("belongs", fields: [userId], references: [id])
  groupId   String   @db.ObjectId
  group     Group    @relation("contains", fields: [groupId], references: [id])
}

enum UserRole {
  PAST_MEMBER
  MEMBER
  ADMIN
}
